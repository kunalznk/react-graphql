generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id         Int        @id @default(autoincrement())
  username   String     @db.VarChar(255) // how to make serachByUsername fast
  fullName   String     @db.VarChar(255)
  emailId    String     @db.VarChar(255)
  password   String     @db.VarChar(255)
  profilePic String     @db.VarChar(255)
  isPublic   Boolean    @default(true)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  post       Post[]
  comment    Comment[]
  Follower   Follower[]
  Like       Like[]
  Tag        Tag[]
}

model Follower {
  userId     Int
  followerId Int
  isAccepted Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  follower User @relation(fields: [userId], references: [id] , onDelete: Cascade)

  @@unique([userId, followerId], name: "user_followe_key")
}

model Post {
  id      Int    @id @default(autoincrement())
  title   String @db.VarChar(255)
  content String @db.VarChar(255)

  mediaPath   String    @db.Text
  mediaFormat String    @db.Text

  authorId    Int
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  comment     Comment[]
  author      User      @relation(fields: [authorId], references: [id], onDelete: Cascade)


  Like      Like[]
  Tag       Tag[]
}

model Like {
  postId Int
  userId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post Post @relation(fields: [postId], references: [id] , onDelete: Cascade)
  user User @relation(fields: [userId], references: [id] , onDelete: Cascade)

  @@unique([userId, postId], name: "post_like_key")
}

model Tag {
  postId Int
  userId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post Post @relation(fields: [postId], references: [id] , onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId], name: "post_tag_key")
}

model Comment {
  id       Int    @id @default(autoincrement())
  authorId Int
  comment  String @db.VarChar(255)
  postId   Int

  post   Post @relation(fields: [postId], references: [id] , onDelete: Cascade)
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
