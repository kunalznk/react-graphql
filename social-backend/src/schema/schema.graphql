 scalar DateTime
 
 type User {
    id: ID
    username: String!
    fullName: String!
    emailId: String!
    profilePic: String
    isPublic: Boolean

    follower: Int
    following: Int

    post: [Post!]
    comment: [Comment!]

    token: String!
  }

  type Post {
    id: ID!
    title: String
    content: String
    mediaPath: String!
    mediaFormat: String!
    authorId: Int!

    likes: Int
    comments : String
  }

  type Comment {
    id: ID
    comment: String
    user: User!
    post: Comment!
  }

  input UserFilterType {
    username: String
    fullName: String
  }

  input PostFilterType {
    title: String
    userId: ID
  }

  input CommentFilterType {
    postId: ID
    userId: ID
  }

  input createUserInput {
    username: String!
    fullName: String!
    emailId: String!
    password: String!
    profilePic: String
  }

  input updateUserInput {
    username: String
    fullName: String
    emailId: String
    profilePic: String
    isPublic: Boolean
  }

  input deleteUserInput {
    id: ID!
  }

  input loginInput {
    username: String!
    emailId: String
    password: String!
  }

  input forgetPasswordInput {
    emailId:String!
  }

  input resetPasswordInput {
    emailId:String!
    userId: Int!
    password: String!
    confirmPass: String!
    token: String!
  }
  
  input followInput {
    
    followingId : Int!
    status: Boolean
  }

  type Media {
    mediaGetPath: String!
    mediaPostPath: String!
    mediaFormat: String
  }

  input createMediaInput {
    mediaGetPath: String!
    mediaPostPath: String!
    mediaFormat: String
  }

  input createPostInput {
    title: String
    content: String
    mediaPath: String!
    mediaFormat: String!
    tageUser: [Int!]!
  }

  input updatePostInput {
    postId: ID!
    title: String!
    content: String!
    tageUser: [Int!]!
  }

  input deletePostInput {
    postId: ID!
  }

  input likePostInput {
    isLike: Boolean!
    postId: ID!
  }

  input createCommentInput {
    postId: ID!
    userId: ID!
    comment: String!
  }

  input updateCommentInput {
    commentId: ID!
    comment: String!
  }

  input deleteCommentInput {
    commentId: ID!
  }

  type Query {
    user(id: ID!): User
    users(userFilter: UserFilterType): [User]

    post(id: ID!): Post
    posts(postFilter: PostFilterType): [Post]

    comment(id: ID!): Comment
    comments(commentFilter: CommentFilterType): [Comment]
  }

  type Mutation {
    
    register(input:createUserInput): Boolean!
    login(input: loginInput): String
    forgetPassword(input: forgetPasswordInput): Boolean!
    resetPassword(input: resetPasswordInput): Boolean!
    logout: Boolean

    follow(input: followInput): Boolean!

    createUser(input: createUserInput): User!
    updateUser(input: updateUserInput): User!
    deleteUser(input: deleteUserInput): Boolean!


    createMediaUrl(input: createMediaInput): Media 
    createPost(input: createPostInput): User!
    updatePost(input: updatePostInput): User!
    deletePost(input: deletePostInput): Boolean!

    likePost(input: likePostInput): Boolean!

    createComment(input: createCommentInput): User!
    updateComment(input: updateCommentInput): User!
    deleteComment(input: deleteCommentInput): Boolean!
  }